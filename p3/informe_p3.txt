TITLE: Algoritmos Práctica 3
AUTHOR 1: Miguel López López        LOGIN 1: m.llopez
AUTHOR 2: Xoel Díaz Pŕestamo        LOGIN 2: xoel.diaz
AUTHOR 3: Ángel Gómez prol          LOGIN 3: angel.gomez.prol
GROUP: 2.1.4
DATE: 20/11/2021

La práctica fue realizada con este dispositivo -->
Máquina: Intel i5-7200U (4) @ 3.100GHz, Linux arch 5.15.2-arch1-1 (8GB RAM)

La realización de esta practica consiste en la implementación de los algoritmos
    de ordenación por inserción y quicksort.

En estos primeros tests, se ejecuta el algoritmo de ordenación por inserción
    para comprobar su funcionamiento,realizando 3 tests con vectores aleatorios,
    uno con un vector ordenado decrecientemente y otro ordenado ascendentemente.

         ORDENACIÓN POR INSERCIÓN
Input: [  4  4 10 -9 -6 -5 -2  7 -5 -8 ]
Output:[ -9 -8 -6 -5 -5 -2  4  4  7 10 ]

Input: [  1 -7  9  3  7 -6 -7  6  3 -4 ]
Output:[ -7 -7 -6 -4  1  3  3  6  7  9 ]

Input: [ -5  2  6 -2  1 -6  3  6  8  9 ]
Output:[ -6 -5 -2  1  2  3  6  6  8  9 ]

Input: [  9  1  2  8  3  4 -8  9 -1 -4 ]
Output:[ -8 -4 -1  1  2  3  4  8  9  9 ]

Input: [ 10  9  8  7  6  5  4  3  2  1 ]
Output:[  1  2  3  4  5  6  7  8  9 10 ]

Input: [  0  1  2  3  4  5  6  7  8  9 ]
Output:[  0  1  2  3  4  5  6  7  8  9 ]

        ***---------------***

 Continuando con quicksort,de nuevo ejecutamos en tres
    vectores aleatorios,uno ascendente y otro descendente.

              QUICKSORT
Input: [-10 10 -3  7  0 -7 -9  4  7  2 ]
Output:[-10 -9 -7 -3  0  2  4  7  7 10 ]

Input: [  8 -8 -6  2  0  3  6 -8 -2  1 ]
Output:[ -8 -8 -6 -2  0  1  2  3  6  8 ]

Input: [ 10 -5 -9 -1-10  2 -7 -9  0  2 ]
Output:[-10 -9 -9 -7 -5 -1  0  2  2 10 ]

Input: [ -3 -2  1  4 -5 10  5 -4  1  1 ]
Output:[ -5 -4 -3 -2  1  1  1  4  5 10 ]

Input: [ 10  9  8  7  6  5  4  3  2  1 ]
Output:[  1  2  3  4  5  6  7  8  9 10 ]

Input: [  0  1  2  3  4  5  6  7  8  9 ]
Output:[  0  1  2  3  4  5  6  7  8  9 ]


 Atendiendo al enunciado de la practica 3,nuestro trabajo consiste en realizar
    la comprobación de la eficiencia y los tiempos de ejecución de los
    algoritmos implementados mediante vectores de n elementos, empezando en
    n=500 hasta n=32000,y excepcionalmente hasta n=128000 cuando t(n) es
    menor que 500.000 microsegundos.

 A través de estas tablas, podemos determinar la complejidad computacional de
    estos algoritmos,así como la verificación empírica de su complejidad
    mediante las cotas sobre y subestimada.

-NOTAS-
    +El (*) situado a la izquierda de determinados valores indica que su tiempo
        de ejecución es inferior a 500 microsegundos, por tanto ejecutamos un
        bucle el cual lo repite 1000 veces y hallamos la media resultante.

    +Todas las mediciones de tiempos están expresadas en microsegundos.


Ordenación por inserción de vector ascendente:

      n            t(n)           t(n)/n^0.85        t(n)/n^1.00        t(n)/n^1.20
(*)   500           1.963          0.009972            0.003926          0.001133
(*)  1000           3.877          0.010927            0.003877          0.000974
(*)  2000           7.566          0.011830            0.003783          0.000827
(*)  4000          15.095          0.013094            0.003774          0.000718
(*)  8000          30.316          0.014590            0.003789          0.000628
(*) 16000          60.987          0.016283            0.003812          0.000550
(*) 32000         121.834          0.018046            0.003807          0.000478
(*) 64000         244.526          0.020094            0.003821          0.000418
(*)128000         489.669          0.022324            0.003826          0.000364

Cota subestimada=n^0.85
Cota sobrestimada=n^1.2
Cota ajustada=n^1.0

--OBSERVACIONES--
  +El cociente entre nuestros tiempos y la cota subestimada es
    estrictamente creciente.
  +El cociente entre nuestros tiempos y la cota sobrestimada es
    estrictamente decreciente.
  +El cociente entre nuestros tiempos y la cota ajustada se
    sitúa próximo a un valor estable de 0.0038..

Ordenación por inserción de vector descendente:
      n            t(n)           t(n)/n^1.80        t(n)/n^2.00        t(n)/n^2.20
(*)   500         354.465          0.004914            0.001418          0.000409
     1000        1412.000          0.005621            0.001412          0.000355
     2000        5639.000          0.006447            0.001410          0.000308
     4000       22708.000          0.007455            0.001419          0.000270
     8000       90375.000          0.008521            0.001412          0.000234
    16000      362675.000          0.009820            0.001417          0.000204
    32000     1452051.000          0.011290            0.001418          0.000178

Cota subestimada=n^1.8
Cota sobrestimada=n^2.2
Cota ajustada=n^2

--OBSERVACIONES--
  +El cociente entre nuestros tiempos y la cota subestimada es
    estrictamente creciente.
  +El cociente entre nuestros tiempos y la cota sobrestimada es
    estrictamente decreciente.
  +El cociente entre nuestros tiempos y la cota ajustada se
    sitúa próximo a un valor estable de 0.00141..

Ordenación por inserción de vector aleatorio:
      n            t(n)           t(n)/n^1.80        t(n)/n^1.98        t(n)/n^2.20
(*)   500         182.284          0.002527            0.000826          0.000210
     1000         723.000          0.002878            0.000830          0.000182
     2000        2910.000          0.003327            0.000847          0.000159
     4000       11336.000          0.003722            0.000836          0.000135
     8000       45325.000          0.004273            0.000848          0.000117
    16000      182722.000          0.004947            0.000836          0.000103
    32000      728824.000          0.005667            0.000876          0.000089

Cota subestimada=n^1.8
Cota sobrestimada=n^2.2
Cota ajustada=n^1.98

--OBSERVACIONES--
  +El cociente entre nuestros tiempos y la cota subestimada es
    estrictamente creciente.
  +El cociente entre nuestros tiempos y la cota sobrestimada es
    estrictamente decreciente.
  +El cociente entre nuestros tiempos y la cota ajustada se
    sitúa próximo a un valor estable de 0.00083.. a excepción
    del vector con 32.000 elementos,donde tenemos una ligera
    ANOMALÍA.
