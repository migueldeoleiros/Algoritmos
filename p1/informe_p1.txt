TITLE: Algoritmos Práctica 1
AUTHOR 1: Miguel López López        LOGIN 1: m.llopez
AUTHOR 2: Ángel Gómez prol          LOGIN 2: angel.gomez.prol
AUTHOR 3: Xoel Díaz Préstamo        LOGIN 3: xoel.diaz
GROUP: 2.1.4
DATE: 20/09/2021

La práctica fue realizada con este dispositivo -->
Máquina: Intel i5-7200U (4) @ 3.100GHz (8GB RAM)
OS:      Arch linux x86_64 
Kernel:  5.14.5-arch1-1 


La realización de esta práctica consiste en la implementación de dos algoritmos,
  los cuales están destinados a la obtención de la mayor suma consecutiva
  posible dada una serie de números.

En este primer test, se comprobó la eficacia de los algoritmos, en esta ocasión
  mediante un array de números ya conocidos.

test con los números dados
[  4  0  9  2  5 ]    20    20
[ -2 -1 -9 -7 -1 ]     0     0
[  9 -2  1 -7 -8 ]     9     9
[  7 -5  6  7 -7 ]    15    15
[ 15 -2 -5 -4 16 ]    20    20
[ -9  2 -5 -4  6 ]     6     6

Por otra parte, en el segundo, se ejecutó el código a la vez que mediante otras
  funciones se obtenían números aleatorios para la prueba del algoritmo.

test de números aleatorios
[  0 -4 -2  4  2 ]    6    6
[  5  0 -3  4 -4 ]    6    6
[  4  5  5 -2  5 ]   17   17
[  1 -2  4 -2 -5 ]    4    4
[  4  3 -4  1  0 ]    7    7
[ -4  5  5  0  5 ]   15   15


Atendiendo al enunciado de la práctica 1, nuestro objetivo era la realización de
  la comprobación de la eficiencia y tiempos de ejecución de los algoritmos
  implementados mediante vectores de tamaño n, siendo su mínimo valor 500 y
  duplicándose hasta llegar a un vector de 32000 elementos.

Mediante la obtención de la siguiente tabla podemos determinar la complejidad
  computacional del algoritmo (ya que en ella se detallan los tiempos de
  ejecución del mismo) así como realizamos la verificación empírica de su
  complejidad mediante el uso de una cota sobrestimada y una cota
  subestimada.

-NOTAS-
  - El (*) situado a la izquierda de determinados valores significa que su tiempo de
      ejecución es inferior a 500μs, por lo tanto ejecutamos un bucle el cual lo
      repite 1000 veces y hallamos la media resultante.
  - Todas las mediciones de tiempos están expresadas en micro segundos (μs).

Test con SumaSubMax1
      n              t(n)          t(n)/n^1.8              t(n)/n^2         t(n)/n^2.2
(*)   500           323.48          0.004484              0.001294          0.000373
     1000          1282.00          0.005104              0.001282          0.000322
     2000          5094.00          0.005824              0.001273          0.000278
     4000         20356.00          0.006683              0.001272          0.000242
     8000         81280.00          0.007663              0.001270          0.000211
    16000        327003.00          0.008854              0.001277          0.000184
    32000       1309029.00          0.010178              0.001278          0.000161

Cota subestimada= n^1.8
Cota sobrestimada= n^2.2
Cota ajustada= n^2

--OBSERVACIONES--
Podemos observar que la diferencia entre nuestro algoritmo y los y la cota
  subestimada es creciente, mientras que en la cota sobrestimada ocurre lo opuesto,
  es decir, tienen tendencia decreciente. En nuestra cota ajustada, la diferencia
  entre nuestros tiempos y la cota, se sitúan próximos a un valor estable de
  0.0012..*


Test con SumaSubMax2
      n               t(n)          t(n)/n^0.75           t(n)/n^0.95       t(n)/n^1.15
(*)   500             1.25          0.011793              0.003403          0.000982
(*)  1000             2.67          0.015031              0.003776          0.000948
(*)  2000             5.36          0.017916              0.003918          0.000857
(*)  4000            10.58          0.021027              0.004003          0.000762
(*)  8000            20.36          0.024073              0.003989          0.000661
(*) 16000            40.86          0.028719              0.004143          0.000598
(*) 32000            79.46          0.033212              0.004171          0.000524

- Medición anómala para n=500, es ligeramente inferior de lo esperado

Cota subestimada= n^0.75
Cota sobrestimada=n^1.15
Cota ajustada=n^0.95

--OBSERVACIONES--
Podemos observar que la diferencia entre nuestro algoritmo y los y la cota
  subestimada es creciente, mientras que en la cota sobrestimada ocurre lo opuesto,
  es decir, tienen tendencia decreciente. En nuestra cota ajustada, la diferencia
  entre nuestros tiempos y la cota, se sitúan próximos a un valor estable de
  0.0041..*

--CONCLUSIONES--
Podemos deducir que el primer algoritmo (sumaSubMax1) tiene una complejidad
  computacional de n^2, mientras que la complejidad computacional del  segundo
  algoritmo (sumaSubMax2) es menor, situándose en n^0.95. Con esto podemos
  concluir que sumaSubMax2 será la mejor opción.

