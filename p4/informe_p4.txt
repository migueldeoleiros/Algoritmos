TITLE: Algoritmos Práctica 4
AUTHOR 1: Miguel López López        LOGIN 1: m.llopez
AUTHOR 2: Xoel Díaz Pŕestamo        LOGIN 2: xoel.diaz
AUTHOR 3: Ángel Gómez prol          LOGIN 3: angel.gomez.prol
GROUP: 2.1.4
DATE: 07/12/2021

La práctica fue realizada con este dispositivo -->
Máquina: Intel i5-7200U (4) @ 3.100GHz (8GB RAM)
OS:      Arch linux x86_64 
Kernel:  5.15.3-arch1-1 
         

La realización de esta práctica consiste en la implementación del algoritmo
  de prim para hallar el árbol de recubrimiento mínimo dada una matriz de adyacencia
  devolviendo una cola.

Primero realizamos tres tests con matrices de adyacencia predefinidas para
  comprobar su correcto funcionamiento:

 --MATRIX--
 0 1 8 4 7
 1 0 2 6 5
 8 2 0 9 5
 4 6 9 0 3
 7 5 5 3 0

 --RESULTADO--
(0,1)(1,2)(0,3)(3,4)
Peso: 10

 --MATRIX--
 0 1 4 7 
 1 0 2 8 
 4 2 0 3 
 7 8 3 0 
        
 --RESULTADO--
(0,1)(1,2)(2,3)
Peso: 6

 --MATRIX--
  0  7 99  5 99 99 99 
  7  0  8  9  7 99 99 
 99  8  0 99  5 99 99 
  5  9 99  0 15  6 99 
 99  7  5 15  0  8  9 
 99 99 99  6  8  0 11 
 99 99 99 99  9 11  0 

 --RESULTADO--
(0,3)(3,5)(0,1)(1,4)(4,2)(4,6)
Peso: 39

A pesar de no estar indicado en el enunciado decidimos calcular el resultado del
  algoritmo con otras 3 matrices definidas aleatoriamente.

 --MATRIZ--
  0   5   3   3   4 
  5   0   1   2   3 
  3   1   0   2   4 
  3   2   2   0   2 
  4   3   4   2   0 

 --RESULTADO--
(0,2)(2,1)(2,3)(3,4)
Peso: 8

 --MATRIZ--
  0   5   3   5   1 
  5   0   2   5   1 
  3   2   0   4   5 
  5   5   4   0   3 
  1   1   5   3   0 

 --RESULTADO--
(0,4)(4,1)(1,2)(4,3)
Peso: 7

 --MATRIZ--
  0   4   1   5   2 
  4   0   4   5   1 
  1   4   0   1   2 
  5   5   1   0   3 
  2   1   2   3   0 

 --RESULTADO--
(0,2)(2,3)(0,4)(4,1)
Peso: 5

Atendiendo al enunciado de la practica 4, nuestro trabajo consiste en calcular
  empiricamente la complejidad computacional del algoritmo generando aleatoriamente
  grafos completos no dirigidos.

A través de esta tabla, podemos determinar la complejidad computacional del
  algoritmo, así como la verificación empírica de su complejidad mediante las
  cotas sobre y subestimada.

-NOTAS-
  - El (*) situado a la izquierda de determinados valores significa que su tiempo de
      ejecución es inferior a 500μs, por lo tanto ejecutamos un bucle el cual lo
      repite 1000 veces y hallamos la media resultante.
  - Todas las mediciones de tiempos están expresadas en microsegundos.

      V            t(V)           t(V)/V^1.50        t(V)/V^1.80        t(V)/V^2.00
(*)    10           1.540          0.048699            0.024407         0.015400
(*)    20           5.377          0.060117            0.024473         0.013442
(*)    40          19.261          0.076136            0.025175         0.012038
(*)    80          67.267          0.094008            0.025249         0.010510
(*)   160         223.356          0.110362            0.024076         0.008725
      320         792.000          0.138357            0.024516         0.007734

Cota subestimada=n^1.5
Cota sobrestimada=n^2
Cota ajustada=n^1.8

--OBSERVACIONES--
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a
      un valor estable de 0.025..
   
--CONCLUSIONES--
  Podemos afirmar que el algoritmo de prim tiene una complejidad computacional
    de n^1.8 con grafos completos no dirigidos aleatorios, la cual es
    ligeramente inferior a la teorica (n^2), que usamos como cota sobrestimada.
