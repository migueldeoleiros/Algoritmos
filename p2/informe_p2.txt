TITLE: Algoritmos Práctica 2
AUTHOR 1: Miguel López López        LOGIN 1: m.llopez
AUTHOR 2: Xoel Díaz Pŕestamo        LOGIN 2: xoel.diaz
AUTHOR 3: Ángel Gómez prol          LOGIN 3: angel.gomez.prol
GROUP: 2.1.4
DATE: 23/10/2021

La práctica fue realizada con este dispositivo -->
Máquina: Intel i5-7200U (4) @ 3.100GHz (8GB RAM)
OS:      Arch linux x86_64 
Kernel:  5.14.5-arch1-1 


La realización de esta práctica consiste en la implementación de los algoritmos
  de ordenación por selección y ordenación por shell.

En estos primeros tests, se ejecuta el algoritmo de ordenación por selección
  para comprobar su funcionamiento,realizando 3 tests con vectores aleatorios
  y uno con un vector ordenado decrecientemente.

         ORDENACION POR SELECCION
Input: [ 2-10-10 -3 -6  2 -3  1  6 -8 ]
Output:[-10-10 -8 -6 -3 -3  1  2  2  6 ]

Input: [ -3 -7 -9  3 -2 -8 -2 -5  7-10 ]
Output:[-10 -9 -8 -7 -5 -3 -2 -2  3  7 ]

Input: [ -5 -7  5  7  7  5 -3  4  6  0 ]
Output:[ -7 -5 -3  0  4  5  5  6  7  7 ]

Input: [ -3  0 -4 -9 -8  3  4-10 10  5 ]
Output:[-10 -9 -8 -4 -3  0  3  4  5 10 ]

Input: [ 10  9  8  7  6  5  4  3  2  1 ]
Output:[  1  2  3  4  5  6  7  8  9 10 ]

Input: [  0  1  2  3  4  5  6  7  8  9 ]
Output:[  0  1  2  3  4  5  6  7  8  9 ]

Continuando por la ordenación por shell, de nuevo ejecutamos el algoritmo en
  tres vectores aleatorios, y uno ordenado decrecientemente.

         ORDENACION SHELL
Input: [ 10 -3 -2 10  2  2  1  9-10 -5 ]
Output:[-10 -5 -3 -2  1  2  2  9 10 10 ]

Input: [ -8  0  8 10  2  6 -4 -5 10 -3 ]
Output:[ -8 -5 -4 -3  0  2  6  8 10 10 ]

Input: [ -9 -4 -2-10  9  6 -9 -3  9  6 ]
Output:[-10 -9 -9 -4 -3 -2  6  6  9  9 ]

Input: [ -5 -6  9 10-10  6  5 -5 -3  0 ]
Output:[-10 -6 -5 -5 -3  0  5  6  9 10 ]

Input: [ 10  9  8  7  6  5  4  3  2  1 ]
Output:[  1  2  3  4  5  6  7  8  9 10 ]

Input: [  0  1  2  3  4  5  6  7  8  9 ]
Output:[  0  1  2  3  4  5  6  7  8  9 ]


Atendiendo al enunciado de la práctica 2, nuestro trabajo consiste en realizar
  la comprobación de la eficiencia y de los tiempos de ejecución de los
  algoritmos implementados mediante vectores n, empezando en n=500 hasta
  alcanzar los 32.000 elementos.

A través de estas tablas, podemos determinar la complejidad computacional de
  estos algoritmos, así como la verificación empírica de su complejidad
  mediante las cotas sobre y subestimada.

-NOTAS-
  - El (*) situado a la izquierda de determinados valores significa que su tiempo de
      ejecución es inferior a 500ms, por lo tanto ejecutamos un bucle el cual lo
      repite 1000 veces y hallamos la media resultante.
  - Todas las mediciones de tiempos están expresadas en microsegundos.


Ordenación por selección de vector ascendente:

      n            t(n)           t(n)/n^1.80        t(n)/n^2.00        t(n)/n^2.20
(*)   500         326.059          0.004520            0.001304          0.000376
     1000        1290.000          0.005136            0.001290          0.000324
     2000        5152.000          0.005890            0.001288          0.000282
     4000       20570.000          0.006753            0.001286          0.000245
     8000       82219.000          0.007752            0.001285          0.000213
    16000      329172.000          0.008913            0.001286          0.000186
    32000     1316882.000          0.010239            0.001286          0.000162

Cota subestimada=n^1.8
Cota sobrestimada=n^2.2
Cota ajustada=n^2

--OBSERVACIONES--
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a
      un valor estable de 0.00128..

Ordenación por selección de vector descendente:

      n            t(n)           t(n)/n^1.80        t(n)/n^2.00        t(n)/n^2.20 
(*)   500         350.310          0.004856            0.001391          0.000404
     1000        1380.000          0.005494            0.001380          0.000347
     2000        5494.000          0.006281            0.001373          0.000300
     4000       21935.000          0.007202            0.001371          0.000261
     8000       87591.000          0.008258            0.001369          0.000227
    16000      350770.000          0.009497            0.001370          0.000198
    32000     1402828.000          0.010908            0.001370          0.000172

Cota subestimada=n^1.8
Cota sobrestimada=n^2.2
Cota ajustada=n^2

--OBSERVACIONES--
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a
      un valor estable de 0.00137..

Ordenación por selección de vector aleatorio:

      n            t(n)           t(n)/n^1.80        t(n)/n^1.98        t(n)/n^2.20
(*)   500         351.662          0.004875            0.001593          0.000406
     1000        1350.000          0.005374            0.001550          0.000339
     2000        5279.000          0.006035            0.001536          0.000289
     4000       20840.000          0.006842            0.001538          0.000248
     8000       82813.000          0.007808            0.001549          0.000214
    16000      330443.000          0.008947            0.001567          0.000186
    32000     1319643.000          0.010261            0.001586          0.000162

Cota subestimada=n^1.8
Cota sobrestimada=n^2.2
Cota ajustada=n^1.98

--OBSERVACIONES--
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a
      un valor estable de 0.0015..
  - Encontramos que la función n^1.98 se acercaba mejor a los valores de nuestra
      función pero solo unicamente con los vectores aleatorios. Esto se aleja
      muy ligeramente de la estimación O(n^2)

Ordenación por shell de vector ascendente:

      n            t(n)           t(n)/n^1.00        t(n)/n^1.14        t(n)/n^1.30
(*)   500          16.828          0.033656            0.014100          0.005216
(*)  1000          37.220          0.037220            0.014151          0.004686
(*)  2000          83.569          0.041785            0.014417          0.004273
(*)  4000         185.466          0.046367            0.014518          0.003851
(*)  8000         407.845          0.050981            0.014487          0.003439
    16000         897.000          0.056063            0.014458          0.003072
    32000        1949.000          0.060906            0.014254          0.002711

Cota subestimada=n
Cota sobrestimada=n^1.30
Cota ajustada=n^1.14

--OBSERVACIONES--
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a
      un valor estable de 0.0014..

Ordenación por shell de vector descendente:
      n            t(n)           t(n)/n^1.00        t(n)/n^1.14        t(n)/n^1.30
(*)   500          30.473          0.060946            0.025532          0.009446
(*)  1000          54.329          0.054329            0.020655          0.006840
(*)  2000         118.932          0.059466            0.020518          0.006081
(*)  4000         262.645          0.065661            0.020560          0.005454
     8000         576.000          0.072000            0.020460          0.004857
    16000        1268.000          0.079250            0.020437          0.004343
    32000        2737.000          0.085531            0.020017          0.003807

Cota subestimada=n
Cota sobrestimada=n^1.30
Cota ajustada=n^1.14

--OBSERVACIONES--
  - Tenemos dos valores anomalos en esta tabla. El primero con n=500 que nos dio
      un resultado ligeramente superior al esperado y el ultimo cuando n=32000
      que nos dio un valor ligeramente inferior
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a
      un valor estable de 0.0205..

Ordenación por shell de vector aleatorio:

      n            t(n)           t(n)/n^1.00        t(n)/n^1.19        t(n)/n^1.30
(*)   500          59.508          0.119016            0.036543          0.018447
(*)  1000         137.060          0.137060            0.036890          0.017255
(*)  2000         313.538          0.156769            0.036988          0.016031
     4000         712.000          0.178000            0.036815          0.014784
     8000        1631.000          0.203875            0.036964          0.013754
    16000        3708.000          0.231750            0.036833          0.012699
    32000        8469.000          0.264656            0.036873          0.011780

Cota subestimada=n
Cota sobrestimada=n^1.30
Cota ajustada=n^1.19

---OBSERVACIONES---
  - El cociente entre nuestros tiempos y la cota subestimada es
      estrictamente creciente
  - El cociente entre nuestros tiempos y la cota sobrestimada es
      estrictamente decreciente
  - El cociente entre nuestros tiempos y la cota ajustada se sitúa próximo a
      un valor estable de 0.0368..

---OBSERVACIONES GENERALES---
  Podemos afirmar que el algoritmo de ordenación por selección tiene una
  	complejidad computacional de n^1.98 en el caso de vectores aleatorios,
   	mientras que con los vectores ordenados ascendente y descendentemente,
   	posee una complejidad cuadrática, la cual es igual a la estimada.

  También podemos concluir que en el caso de la ordenación por shell, cuando
   	le proporcionamos un vector ascendente o descendente su complejidad 
   	computacional es n^1.14 y cuando es un vector aleatorio aumenta hasta 
   	llegar a n^1.19, lo cual diverge de la estimacion de O(n log n)

---CONCLUSIONES---
  La complejidad computacional de la ordenación por selección O(n^2) es mucho
   	mayor que la de ordenación por shell, la cual se sitúa en O(n^1.19)
   	para vectores aleatorios.
   	Por lo tanto, en términos generales, usar el algoritmo de ordenación por
   	shell sera mas rapido y una mejor opción
